[inv_button1,smithing:column1] @attempt_smithing(last_item, 1);
[inv_button2,smithing:column1] @attempt_smithing(last_item, 5);
[inv_button3,smithing:column1] @attempt_smithing(last_item, 10);
[inv_button1,smithing:column2] @attempt_smithing(last_item, 1);
[inv_button2,smithing:column2] @attempt_smithing(last_item, 5);
[inv_button3,smithing:column2] @attempt_smithing(last_item, 10);
[inv_button1,smithing:column3] @attempt_smithing(last_item, 1);
[inv_button2,smithing:column3] @attempt_smithing(last_item, 5);
[inv_button3,smithing:column3] @attempt_smithing(last_item, 10);
[inv_button1,smithing:column4] @attempt_smithing(last_item, 1);
[inv_button2,smithing:column4] @attempt_smithing(last_item, 5);
[inv_button3,smithing:column4] @attempt_smithing(last_item, 10);
[inv_button1,smithing:column5] @attempt_smithing(last_item, 1);
[inv_button2,smithing:column5] @attempt_smithing(last_item, 5);
[inv_button3,smithing:column5] @attempt_smithing(last_item, 10);
// ==== Using Hammer on Smithing Item ====
[opheldu,bronze_hammer] ~mesbox("Nothing interesting happens.");
[opheldu,iron_hammer] ~mesbox("Nothing interesting happens.");
[opheldu,steel_hammer] ~mesbox("Nothing interesting happens.");
[opheldu,mithril_hammer] ~mesbox("Nothing interesting happens.");
[opheldu,adamant_hammer] ~mesbox("Nothing interesting happens.");
[opheldu,rune_hammer] ~mesbox("Nothing interesting happens.");
[opheldu,dragon_hammer] ~mesbox("Nothing interesting happens.");

// ==== Using Hammer on Anvil Object ====
[oplocu,anvil]
if (%tutorial_progress < ^tutorial_complete) {
    if (%tutorial_progress < ^mining_instructor_before_smelt_bronze_bar) {
        ~mesbox("This is an anvil used for smithing.|You'll learn how to use it soon.");
        return;
    }
    if (%tutorial_progress < ^mining_instructor_smith_a_dagger) {
        ~mesbox("You need a hammer to work the metal with.|Talk to the mining instructor to get one.");
        return;
    }
}

if (last_useitem = gold_bar & %legends_progress >= ^legends_asked_gujuo_holy_water) @make_golden_bowl;
else if (oc_category(last_useitem) = category_151) @smithing_anvil_interface(last_useitem);
else if (last_useitem = dragonshield_a | last_useitem = dragonshield_b) @make_dragon_sq;
else ~displaymessage(^dm_default);
if (last_useitem = gold_bar & %legends_progress >= ^legends_asked_gujuo_holy_water) @make_golden_bowl;
else if (oc_category(last_useitem) = category_151) @smithing_anvil_interface(last_useitem);
else if (last_useitem = dragonshield_a | last_useitem = dragonshield_b) @make_dragon_sq;
else ~displaymessage(^dm_default);

[if_close,smithing]
inv_stoptransmit(smithing:column1);
inv_stoptransmit(smithing:column2);
inv_stoptransmit(smithing:column3);
inv_stoptransmit(smithing:column4);
inv_stoptransmit(smithing:column5);

[label,smithing_anvil_interface](obj $last_item)
def_struct $struct = oc_param($last_item, smithing_anvil_struct);
def_namedobj $hammer = null;
if (inv_total(inv, dragon_hammer) > 0) {
    $hammer = dragon_hammer;
    if (stat_base(smithing) < 99) {
        ~mesbox("You cannot smith with a Dragon Hammer until level 99 Smithing.");
        return;
    }
} else if (inv_total(inv, founders_hammer) > 0) {
    $hammer = founders_hammer;
} else if (inv_total(inv, rune_hammer) > 0) {
    $hammer = rune_hammer;
    if (stat_base(smithing) < 90) {
        ~mesbox("You cannot smith with a Rune Hammer until level 90 Smithing.");
        return;
    }
} else if (inv_total(inv, adamant_hammer) > 0) {
    $hammer = adamant_hammer;
    if (stat_base(smithing) < 70) {
        ~mesbox("You cannot smith with an Adamant Hammer until level 70 Smithing.");
        return;
    }
} else if (inv_total(inv, mithril_hammer) > 0) {
    $hammer = mithril_hammer;
    if (stat_base(smithing) < 50) {
        ~mesbox("You cannot smith with a Mithril Hammer until level 50 Smithing.");
        return;
    }
} else if (inv_total(inv, steel_hammer) > 0) {
    $hammer = steel_hammer;
    if (stat_base(smithing) < 35) {
        ~mesbox("You cannot smith with a Steel Hammer until level 35 Smithing.");
        return;
    }
} else if (inv_total(inv, iron_hammer) > 0) {
    $hammer = iron_hammer;
    if (stat_base(smithing) < 15) {
        ~mesbox("You cannot smith with an Iron Hammer until level 15 Smithing.");
        return;
    }
} else if (inv_total(inv, bronze_hammer) > 0) {
    $hammer = bronze_hammer;
} else if (inv_total(inv, hammer) > 0) {
    $hammer = hammer;
} else {
    ~mesbox("You need a hammer to work the metal with.");
    return;
}
if ($struct = null) {
    // https://web.archive.org/web/20170122060114/https://www.neoseeker.com/forums/2410/t682388-silver/
    ~chatplayer("<p,neutral>Perhaps I should use this in a furnace instead.");
    return;
}
def_int $levelrequired = struct_param($struct, levelrequired);
def_int $player_level = stat(smithing);
// check if high enough level
if ($player_level < $levelrequired) {
    ~mesbox("You need a Smithing level of at least <tostring($levelrequired)> to work <lowercase(oc_name(struct_param($struct, namedobj)))>s.");
    return;
}

//set varps
%smithing_bars = inv_total(inv, struct_param($struct, namedobj));
%smithing_level = $player_level;
// Check if tourist trap is completed before sending white text option on darts
if (%desertrescue_progress >= ^desertrescue_learned_darts) {
    %option1 = 1;
} else {
    %option1 = 0;
}
// hide wire button if its not bronze
// hide studs button if its not steel
if ($last_item = bronze_bar) {
    // bronze plate bodies are unlocked at lvl 18, but the interface data uses gt,18. so i have to +1 here
    if (%smithing_level = 18) {
        %smithing_level = 19;
    }
    if_sethide (smithing:other_layer, false);
    // https://web.archive.org/web/20050410152119/http://www.tip.it/runescape/smithing_tables.php?metal=bronze
    if_settext (smithing:com_102, "Bronze wire");
} else if ($last_item = steel_bar) {
    if_sethide (smithing:stud_layer, false);
    if_sethide (smithing:other_layer, false);
    // https://imgur.com/CdcGdXD
    if_settext (smithing:com_102, "Steel nails");
}  else {
    if_sethide (smithing:other_layer, true);
    if_sethide (smithing:stud_layer, true);
}
// hide studs button if its not steel
if ($last_item ! steel_bar) {
    if_sethide (smithing:stud_layer, true);
} else {
    if_sethide (smithing:stud_layer, false);
}
// each bar needs to be shifted down, since only bronze level req is in the interface
switch_obj ($last_item)
{
    case bronze_bar :
        if (%tutorial_progress < ^tutorial_complete) {
            %smithing_level = 1;
        } else {
            %smithing_level = calc($player_level + 1);
        }
        inv_transmit(smithing_bronze1, smithing:column1);
        inv_transmit(smithing_bronze2, smithing:column2);
        inv_transmit(smithing_bronze3, smithing:column3);
        inv_transmit(smithing_bronze4, smithing:column4);
        inv_transmit(smithing_bronze5, smithing:column5);
    case iron_bar :
        %smithing_level = calc($player_level - 14);
        inv_transmit(smithing_iron1, smithing:column1);
        inv_transmit(smithing_iron2, smithing:column2);
        inv_transmit(smithing_iron3, smithing:column3);
        inv_transmit(smithing_iron4, smithing:column4);
        inv_transmit(smithing_iron5, smithing:column5);
    case steel_bar :
        %smithing_level = calc($player_level - 29);
        inv_transmit(smithing_steel1, smithing:column1);
        inv_transmit(smithing_steel2, smithing:column2);
        inv_transmit(smithing_steel3, smithing:column3);
        inv_transmit(smithing_steel4, smithing:column4);
        inv_transmit(smithing_steel5, smithing:column5);
    case mithril_bar :
        %smithing_level = calc($player_level - 49);
        inv_transmit(smithing_mithril1, smithing:column1);
        inv_transmit(smithing_mithril2, smithing:column2);
        inv_transmit(smithing_mithril3, smithing:column3);
        inv_transmit(smithing_mithril4, smithing:column4);
        inv_transmit(smithing_mithril5, smithing:column5);
    case adamantite_bar :
        %smithing_level = calc($player_level - 69);
        inv_transmit(smithing_adamant1, smithing:column1);
        inv_transmit(smithing_adamant2, smithing:column2);
        inv_transmit(smithing_adamant3, smithing:column3);
        inv_transmit(smithing_adamant4, smithing:column4);
        inv_transmit(smithing_adamant5, smithing:column5);
    case runite_bar :
        // rune platebody, legs, and skirt go past 99 smithing
        if ($player_level > 98) {
            %smithing_level = 19;
        } else {
            %smithing_level = calc($player_level - 84);
        }
        inv_transmit(smithing_rune1, smithing:column1);
        inv_transmit(smithing_rune2, smithing:column2);
        inv_transmit(smithing_rune3, smithing:column3);
        inv_transmit(smithing_rune4, smithing:column4);
        inv_transmit(smithing_rune5, smithing:column5);
    case dragon_bar :
        if ($player_level > 98) {
            %smithing_level = 19;
        } else {
            %smithing_level = calc($player_level - 84);
        }
        inv_transmit(smithing_dragon1, smithing:column1);
        inv_transmit(smithing_dragon2, smithing:column2);
        inv_transmit(smithing_dragon3, smithing:column3);
        inv_transmit(smithing_dragon4, smithing:column4);
        inv_transmit(smithing_dragon5, smithing:column5);
    case default :
        ~displaymessage(^dm_default);
        return;
}

if_openmain(smithing);

[label,attempt_smithing](obj $last_item, int $count)
def_namedobj $hammer = null;
def_seq $anim = null;
def_int $delay = 5;
def_int $loop = $delay;

if (inv_total(inv, dragon_hammer) > 0) {
    $hammer = dragon_hammer;
    $anim = human_smithing_dragon;
    $delay = 0;
    $loop = $delay;
} else if (inv_total(inv, founders_hammer) > 0) {
    $hammer = founders_hammer;
    $anim = human_smithing_founders;
    $delay = 1;
    $loop = $delay;    
} else if (inv_total(inv, rune_hammer) > 0) {
    $hammer = rune_hammer;
    $anim = human_smithing_rune;
    $delay = 1;
    $loop = $delay;
} else if (inv_total(inv, adamant_hammer) > 0) {
    $hammer = adamant_hammer;
    $anim = human_smithing_adamant;
    $delay = 2;
    $loop = $delay;
} else if (inv_total(inv, mithril_hammer) > 0) {
    $hammer = mithril_hammer;
    $anim = human_smithing_mithril;
    $delay = 2;
    $loop = $delay;
} else if (inv_total(inv, steel_hammer) > 0) {
    $hammer = steel_hammer;
    $anim = human_smithing_steel;
    $delay = 3;
    $loop = $delay;
} else if (inv_total(inv, iron_hammer) > 0) {
    $hammer = iron_hammer;
    $anim = human_smithing_iron;
    $delay = 3;
    $loop = $delay;
} else if (inv_total(inv, bronze_hammer) > 0) {
    $hammer = bronze_hammer;
    $anim = human_smithing_bronze;
    $delay = 4;
    $loop = $delay;
} else if (inv_total(inv, hammer) > 0) {
    $hammer = hammer;
    $anim = human_smithing;
    $delay = 4;
    $loop = $delay;
}
if (%founders_transmog = ^transmog_on){
    $anim = human_smithing_founders;
}
if_close;
// get item data from db
db_find(smithing:ifproduct, $last_item);
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
// todo: check if they have tourist trap completed for dart tips
// IT CHECKS FOR DARTS FIRST BTW (before members check)
switch_obj(db_getfield($data,smithing:product,0)) {
     case bronze_dart_tip, iron_dart_tip, steel_dart_tip, mithril_dart_tip, adamant_dart_tip, rune_dart_tip :
         if (%desertrescue_progress < ^desertrescue_learned_darts) {
             ~mesbox("You're not sure how to make darts yet.");
             return;
         }
 }

// This check comes after darts but before mems, confirmed.
if (~in_tutorial_island(coord) = true & last_item ! bronze_dagger) {
    ~mesbox("You cannot make this on Tutorial Island.");
    return;
}

// check if mems obj is selected
if (oc_members($last_item) = true & map_members = false) {
    mes("You can only make that on a members' server.");
    return;
}
// check if player has enough bars
def_int $bar_amount = db_getfield($data,smithing:bar_amount,0);
def_namedobj $bar = db_getfield($data, smithing:bar, 0);

if (inv_total(inv, $bar) < $bar_amount) {
    ~mesbox("You don't have enough <lowercase(oc_name($bar))>s to make <db_getfield($data,smithing:end_message,0)>."); // https://youtu.be/Xud7h207rZc?t=286
    return;
}
// check if player has high enough level
def_int $levelrequired = db_getfield($data,smithing:levelrequired,0);
if (stat(smithing) < $levelrequired) {
    ~mesbox("You need a Smithing level of <tostring($levelrequired)> to make <db_getfield($data,smithing:levelfailmessage,0)>.");
    return;
}

// play anim and sound
anim($anim, $delay);
sound_synth(anvil_4, $loop, $delay);
// delay player during whole smithing sesh
// https://oldschool.runescape.wiki/w/Update:Dev_Blog:_Third_Old_School_RuneScape_Content_Poll
if (%tutorial_progress < ^tutorial_complete) {
    ~tut_smithing_anvil($count);
} else {
    ~smithing_anvil($data, $count);
}
//--------------------------

//--------------------------
// items appear in the inventory after 2 ticks, then the player is delayed for 3 ticks after
// https://youtu.be/vQixsBb7wPQ?t=95, level up interface takes 3 ticks to appear
[proc,smithing_anvil](dbrow $data, int $count)
p_delay(1);
def_int $bar_amount = db_getfield($data,smithing:bar_amount,0);
def_namedobj $bar = db_getfield($data, smithing:bar, 0);
def_namedobj $product = db_getfield($data, smithing:product, 0);
def_int $product_amount = db_getfield($data,smithing:product_amount,0);
def_namedobj $hammer = null;
def_seq $anim = null;
def_int $delay = 5;
def_int $loop = $delay;

if (inv_total(inv, dragon_hammer) > 0) {
    $hammer = dragon_hammer;
    $anim = human_smithing_dragon;
    $delay = 0;
    $loop = $delay;
} else if (inv_total(inv, founders_hammer) > 0) {
    $hammer = founders_hammer;
    $anim = human_smithing_founders;
    $delay = 1;
    $loop = $delay;
} else if (inv_total(inv, rune_hammer) > 0) {
    $hammer = rune_hammer;
    $anim = human_smithing_rune;
    $delay = 1;
    $loop = $delay;
} else if (inv_total(inv, adamant_hammer) > 0) {
    $hammer = adamant_hammer;
    $anim = human_smithing_adamant;
    $delay = 2;
    $loop = $delay;
} else if (inv_total(inv, mithril_hammer) > 0) {
    $hammer = mithril_hammer;
    $anim = human_smithing_mithril;
    $delay = 2;
    $loop = $delay;
} else if (inv_total(inv, steel_hammer) > 0) {
    $hammer = steel_hammer;
    $anim = human_smithing_steel;
    $delay = 3;
    $loop = $delay;
} else if (inv_total(inv, iron_hammer) > 0) {
    $hammer = iron_hammer;
    $anim = human_smithing_iron;
    $delay = 3;
    $loop = $delay;
} else if (inv_total(inv, bronze_hammer) > 0) {
    $hammer = bronze_hammer;
    $anim = human_smithing_bronze;
    $delay = 4;
    $loop = $delay;
} else if (inv_total(inv, hammer) > 0) {
    $hammer = hammer;
    $anim = human_smithing;
    $delay = 4;
    $loop = $delay;
}
if (%founders_transmog = ^transmog_on){
    $anim = human_smithing_founders;
}
// add product

// add smithing xp
def_struct $struct = oc_param($bar, smithing_anvil_struct);

def_int $xp_multiplier = 1;
def_int $product_multiplier = 1;

// Determine hammer bonuses
if (inv_total(inv, dragon_hammer) > 0) {
    $xp_multiplier = 4;
    if ($bar_amount > 4) {
        $product_multiplier = 5;
    } else {
        $product_multiplier = 1;
    }
} else if (inv_total(inv, rune_hammer) > 0) {
    $xp_multiplier = 2;
    if ($bar_amount > 4) {
        $product_multiplier = 4;
    } else {
        $product_multiplier = 1;
    }
} else if (inv_total(inv, adamant_hammer) > 0) {
    $xp_multiplier = 2;
    if ($bar_amount > 4) {
        $product_multiplier = 3;
    } else {
        $product_multiplier = 1;
    }
} else if (inv_total(inv, mithril_hammer) > 0) {
    $xp_multiplier = 2;
    if ($bar_amount > 4) {
        $product_multiplier = 2;
    } else {
        $product_multiplier = 1;
    }
} else if (inv_total(inv, founders_hammer) > 0) {
    $xp_multiplier = 1;
    $product_multiplier = 1;
} else if (
    inv_total(inv, steel_hammer) > 0 |
    inv_total(inv, iron_hammer) > 0 |
    inv_total(inv, bronze_hammer) > 0 |
    inv_total(inv, hammer) > 0
) {
    $xp_multiplier = 1;
    $product_multiplier = 1;
} else {
    ~mesbox("You need a hammer to work the metal with.");
    return;
}

// Calculate and apply smithing experience
def_int $xp = calc($bar_amount * struct_param($struct, xpperbar) * $xp_multiplier);
// delete bars
inv_del(inv, $bar, $bar_amount);
stat_advance(smithing, $xp);

// Apply product multiplier if greater than 1
if ($product_multiplier > 1) {
    $product_amount = calc($product_amount * $product_multiplier);
}

inv_add(inv, $product, $product_amount);
// display message
mes("You hammer the <struct_param($struct, name)> and make <db_getfield($data,smithing:end_message,0)>.");
p_delay(2);
// end smithing if count is less than 1
$count = calc($count - 1);
// check if player has enough bars
if (inv_total(inv, $bar) < $bar_amount & $count > 0) {
    ~mesbox("You don't have enough <lowercase(oc_name($bar))>s to make any more."); // https://youtu.be/Xud7h207rZc?t=286
    return;
}
if ($count < 1) {
    return;
}
// play anim and sound


anim($anim, $delay);
sound_synth(anvil_4, $loop, $delay);
// recall proc
~smithing_anvil($data, $count);
//--------------------------