[opheldu,clay]
switch_obj (last_useitem)
{
    case bowl_water, bucket_water, jug_water : @make_softclay(last_useitem);
    case default : ~displaymessage(^dm_default);
};

[oplocu,potters_wheel]
switch_obj (last_useitem)
{
    case softclay : @craft_pottery_interface;
    case clay : ~objbox(clay, "This clay is too hard to craft|You'll need to soften it with some water.", 250, 0, divide(^objbox_height, 2));
    case default : ~displaymessage(^dm_default);
};

[oplocu,pottery_oven]
switch_obj (last_useitem)
{
    case bowl_unfired, piedish_unfired, pot_unfired : @fire_pottery(last_useslot);
    case default : ~displaymessage(^dm_default);
};


[label,make_softclay](obj $water_source)
if (getqueue(make_softclay_repeat) > 0) {
    clearqueue(make_softclay_repeat);
}
// https://youtu.be/48JsDRNXWAc?list=PLn23LiLYLb1bQ7Hwp77KoNBjKvpZQTfJT&t=240
/// clay works the same as rsc
def_namedobj $empty_source = oc_param($water_source, next_obj_stage);
mes("You mix the clay and water.");
inv_del(inv, clay, 1);
//delete water source
inv_del(inv, oc_param($empty_source, next_obj_stage), 1);
//add empty water source BEFORE soft clay
inv_add(inv, $empty_source, 1);
//add soft clay
inv_add(inv, softclay, 1);
p_delay(1); // 2 ticks
mes("You now have some soft workable clay.");
queue(make_softclay_repeat, 2, $water_source);

[queue,make_softclay_repeat](obj $water_source)
if (inv_total(inv, $water_source) > 0 & inv_total(inv, clay) > 0) {
    def_int $slot = ~inv_find(inv, $water_source, 0);
    if ($slot >= 0) {
        @make_softclay(inv_getobj(inv, $slot));
    }
}

[label,craft_pottery_interface] 
def_namedobj $choice = ~multiobj3(
    "What would you like to make?", 
    pot_unfired, 0, 2, 185, "Pot", 0, 0, 
    piedish_unfired, 0, -4, 190, "Pie Dish", 0, 0, 
    bowl_unfired, 0, 0, 200, "Bowl", 0, 0
);
if ($choice = null) {
    ~displaymessage(^dm_default);
    return;
}
@craft_pottery($choice);

// osrs is a weak queue that sets and checks %action_delay.
// if %action_delay is under a certain point then it gives a roll
// Before sep 2004, it was likely just a p_delay()
[label,craft_pottery](namedobj $item)
if_close;
if (getqueue(craft_pottery_repeat) > 0) {
    clearqueue(craft_pottery_repeat);
}
def_struct $struct = oc_param($item, crafting_pottery_struct);
def_string $name = lowercase(oc_name($item));
// Check level
def_int $level = struct_param($struct, levelrequire);
if (stat(crafting) < $level)
{
    ~objbox($item, "You need a Crafting level of <tostring($level)> to make a <$name>.", 250, 0, divide(^objbox_height, 2));
    return;
}
sound_synth(pottery, 0, 0);
anim(human_potterywheel, 0);
p_delay(2);
inv_del(inv, softclay, 1);
inv_add(inv, $item, 1);
stat_advance(crafting, struct_param($struct, processexp));
if (inv_total(worn, brown_apron) > 0) {
    stat_advance(crafting, struct_param($struct, processexp));
    mes("Your crafting skills are showing!");
}
%clay_spun = calc(%clay_spun + 1);
mes("You make the clay into a <substring($name, 8, string_length($name))>.");
queue(craft_pottery_repeat, 2, $item);

[queue,craft_pottery_repeat](namedobj $last)
if (inv_total(inv, softclay) > 0) {
    @craft_pottery($last);
}

// No level req for some reason (does have a success chance though)
[label,fire_pottery](int $last)
if (getqueue(fire_pottery_repeat) > 0) {
    clearqueue(fire_pottery_repeat);
}
def_obj $last_obj = inv_getobj(inv, $last);
def_struct $struct = oc_param($last_obj, crafting_pottery_struct);
mes("You put the <oc_name(struct_param($struct, product))> in the oven.");
sound_synth(furnace, 0, 0);
anim(human_furnace, 0);

p_delay(2);

mes("The <oc_name(struct_param($struct, product))> hardens in the oven.");

p_delay(2);

def_namedobj $product = struct_param($struct, product);
// delete unfired item
inv_del(inv, $last_obj, 1);
// add fired item. success rate is the same for all unfired items
if (stat_random(stat(crafting), 180, 800) = true) {
    inv_add(inv, $product, 1);
    stat_advance(crafting, struct_param($struct, productexp));
    if (inv_total(worn, brown_apron) > 0) {
        stat_advance(crafting, struct_param($struct, processexp));
        mes("Your crafting skills are showing!");
    }
    mes("You remove the <oc_name($product)> from the oven.");
} else {
    mes("The <oc_name($product)> cracks in the oven.");
}
%clay_fired = calc(%clay_fired + 1);
queue(fire_pottery_repeat, 2, $last_obj);

[queue,fire_pottery_repeat](obj $last)
if (inv_total(inv, $last) > 0 & busy2 = false) {
    def_int $slot = ~inv_find(inv, $last, 0);
    if ($slot >= 0) {
        @fire_pottery($slot);
    }
}