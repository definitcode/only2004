[opheldu,hc_tinderbox]
if (last_useitem = newbielogs) {
    @tut_light_logs_inv(last_useslot);
} else if (oc_param(last_useitem, unlit_arrow) = ^true) {
    @light_firearrow(last_useitem);
} else if (oc_category(last_useitem) = category_22) {
    @light_logs_inv(last_useslot);
} else if (oc_category(last_useitem) = light_source_unlit) {
    @ignite_light_source(last_useitem);
} else {
    ~displaymessage(^dm_default);
}
// trigger for logs on ground
[opobj4,_category_22]
    @light_logs_ground;

[opobju,_category_22]
if (last_useitem = tinderbox | last_useitem = hc_tinderbox | last_useitem = dragon_tinderbox | last_useitem = rune_tinderbox | last_useitem = adamant_tinderbox | last_useitem = mithril_tinderbox | last_useitem = steel_tinderbox | last_useitem = iron_tinderbox | last_useitem = bronze_tinderbox) {
    @light_logs_ground;
} else {
    ~displaymessage(^dm_default);
}

// opheldu for logs is handled in fletching
[opheldu,tinderbox]
if (last_useitem = newbielogs) {
    @tut_light_logs_inv(last_useslot);
} else if (oc_param(last_useitem, unlit_arrow) = ^true) {
    @light_firearrow(last_useitem);
} else if (oc_category(last_useitem) = category_22) {
    @light_logs_inv(last_useslot);
} else if (oc_category(last_useitem) = light_source_unlit) {
    @ignite_light_source(last_useitem);
} else {
    ~displaymessage(^dm_default);
}
// support for hc_tinderbox used on logs in inventory
if (oc_category(last_useitem) = category_22) {
    @light_logs_inv(last_useslot);
} else if (oc_category(last_useitem) = light_source_unlit) {
    @ignite_light_source(last_useitem);
} else {
    ~displaymessage(^dm_default);
}

[label,light_logs_ground]
def_obj $log = obj_type;
// check level first
def_int $level = oc_param($log, levelrequire);
if (stat(firemaking) < $level) {
    mes("You need a Firemaking level of <tostring($level)> to burn <oc_name($log)>.");
    return;
}
if (~area_allow_loc_add(obj_coord) = false) {
    mes("You can't light a fire here.");
    return;
}

// --- tinderbox detection ---
def_namedobj $tbox = null;
if (inv_total(inv, tinderbox) > 0) {
    $tbox = tinderbox;
} else if (inv_total(inv, hc_tinderbox) > 0) {
    $tbox = hc_tinderbox;
} else if (inv_total(inv, dragon_tinderbox) > 0) {
    $tbox = dragon_tinderbox;
} else if (inv_total(inv, rune_tinderbox) > 0) {
    $tbox = rune_tinderbox;
} else if (inv_total(inv, adamant_tinderbox) > 0) {
    $tbox = adamant_tinderbox;
} else if (inv_total(inv, mithril_tinderbox) > 0) {
    $tbox = mithril_tinderbox;
} else if (inv_total(inv, steel_tinderbox) > 0) {
    $tbox = steel_tinderbox;
} else if (inv_total(inv, iron_tinderbox) > 0) {
    $tbox = iron_tinderbox;
} else if (inv_total(inv, bronze_tinderbox) > 0) {
    $tbox = bronze_tinderbox;
} else if (inv_total(inv, founders_tinderbox) > 0) {
    $tbox = founders_tinderbox;
}

if ($tbox = null) {
    mes("You need a tinderbox to light a fire.");
    return;
}
// --- tinderbox animation selection ---
def_seq $anim_id = null;
if ($tbox = tinderbox) {
    $anim_id = human_createfire;
} else if ($tbox = hc_tinderbox) {
    $anim_id = human_hccreatefire;
} else if ($tbox = dragon_tinderbox) {
    $anim_id = human_dragoncreatefire;
} else if ($tbox = rune_tinderbox) {
    $anim_id = human_runecreatefire;
} else if ($tbox = adamant_tinderbox) {
    $anim_id = human_adacreatefire;
} else if ($tbox = mithril_tinderbox) {
    $anim_id = human_mithrilcreatefire;
} else if ($tbox = steel_tinderbox) {
    $anim_id = human_steelcreatefire;
} else if ($tbox = iron_tinderbox) {
    $anim_id = human_ironcreatefire;
} else if ($tbox = bronze_tinderbox) {
    $anim_id = human_bronzecreatefire;
} else if ($tbox = founders_tinderbox){
    $anim_id = human_founderscreatefire;
} else {
    $anim_id = human_createfire;
}
// 4t cycle
// mes(tostring(sub(map_clock, %action_delay)));
if (%action_delay < map_clock) {
    p_stopaction;
    anim($anim_id, 0);
    sound_synth(tinderbox_strike, 0, 0);
    mes("You attempt to light the logs.");
    %action_delay = calc(map_clock + 3);
} else if (%action_delay = map_clock) {
    if(stat_random(stat(firemaking), 64, 512) = true) { // firemaking roll
        %action_delay = calc(map_clock + 4);
        // attempt to firemaking each direction: west east south north
        // if player isnt standing on the log anymore, the fire is lit
        ~push_player(obj_coord);
        // if fully blocked then just light the log and dont move
        ~firemaking_success(obj_coord, $log);
        return;
    } else {
        // if fails, then reattempt to light
        anim($anim_id, 0);
        sound_synth(tinderbox_strike, 0, 0);
        %action_delay = calc(map_clock + 4);
    }
}
// mes("<tostring(map_clock)>: p_opobj(4)");
p_opobj(4); // interact with obj again

[label,light_logs_inv](int $slot)
def_obj $log = inv_getobj(inv, $slot);
def_int $level = oc_param($log, levelrequire);

if (stat(firemaking) < $level) {
    mes("You need a Firemaking level of <tostring($level)> to burn <oc_name($log)>.");
    return;
}
// check if the coord is already occupied by an interactable loc
if (~area_allow_loc_add(coord) = false) {
    mes("You can't light a fire here.");
    return;
}
// --- tinderbox detection ---
def_namedobj $tbox = null;
if (inv_total(inv, tinderbox) > 0) {
    $tbox = tinderbox;
} else if (inv_total(inv, hc_tinderbox) > 0) {
    $tbox = hc_tinderbox;
} else if (inv_total(inv, dragon_tinderbox) > 0) {
    $tbox = dragon_tinderbox;
} else if (inv_total(inv, rune_tinderbox) > 0) {
    $tbox = rune_tinderbox;
} else if (inv_total(inv, adamant_tinderbox) > 0) {
    $tbox = adamant_tinderbox;
} else if (inv_total(inv, mithril_tinderbox) > 0) {
    $tbox = mithril_tinderbox;
} else if (inv_total(inv, steel_tinderbox) > 0) {
    $tbox = steel_tinderbox;
} else if (inv_total(inv, iron_tinderbox) > 0) {
    $tbox = iron_tinderbox;
} else if (inv_total(inv, bronze_tinderbox) > 0) {
    $tbox = bronze_tinderbox;
} else if (inv_total(inv, founders_tinderbox) > 0) {
    $tbox = founders_tinderbox;
}

if ($tbox = null) {
    mes("You need a tinderbox to light a fire.");
    return;
}


// --- tinderbox animation selection ---
def_seq $anim_id = null;
def_int $xp_mul = 0;
if ($tbox = tinderbox) {
    $anim_id = human_createfire;
    $xp_mul = 1;
} else if ($tbox = hc_tinderbox) {
    $anim_id = human_hccreatefire;
    $xp_mul = 1;
} else if ($tbox = dragon_tinderbox) {
    $anim_id = human_dragoncreatefire;
    $xp_mul = 4;
} else if ($tbox = rune_tinderbox) {
    $anim_id = human_runecreatefire;
    $xp_mul = 3;
} else if ($tbox = adamant_tinderbox) {
    $anim_id = human_adacreatefire;
    $xp_mul = 2;
} else if ($tbox = mithril_tinderbox) {
    $anim_id = human_mithrilcreatefire;
    $xp_mul = 2;
} else if ($tbox = steel_tinderbox) {
    $anim_id = human_steelcreatefire;
    $xp_mul = 1;
} else if ($tbox = iron_tinderbox) {
    $anim_id = human_ironcreatefire;
    $xp_mul = 1;
} else if ($tbox = bronze_tinderbox) {
    $anim_id = human_bronzecreatefire;
    $xp_mul = 1;
} else if ($tbox = founders_tinderbox){
    $anim_id = human_founderscreatefire;
    $xp_mul = 1;
} else {
    $anim_id = human_createfire;
}
inv_dropslot(inv, coord, $slot, ^lootdrop_duration);
if (%action_delay < map_clock) {
    p_stopaction;
    anim($anim_id, 0);
    sound_synth(tinderbox_strike, 0, 0);
    mes("You attempt to light the logs.");
    %action_delay = calc(map_clock + 3);
} else if (%action_delay = map_clock) {
    if(stat_random(stat(firemaking), 64, 512) = true) { // firemaking roll
        %action_delay = calc(map_clock + 4);
        ~push_player(obj_coord);
        ~firemaking_success(obj_coord, $log); // if fully blocked then just light the log and dont move
        return;
    } else {
        // if fails, then reattempt to light
        anim($anim_id, 0);
        sound_synth(tinderbox_strike, 0, 0);
        %action_delay = calc(map_clock + 4);
    }
}
p_opobj(4);

[proc,firemaking_success](coord $fire_coord, obj $log)
def_int $xp_mul = 0;
def_namedobj $tbox = null;
def_seq $anim_id = null;
if (inv_total(inv, tinderbox) > 0) {
    $tbox = tinderbox;
} else if (inv_total(inv, hc_tinderbox) > 0) {
    $tbox = hc_tinderbox;
} else if (inv_total(inv, dragon_tinderbox) > 0) {
    $tbox = dragon_tinderbox;
} else if (inv_total(inv, rune_tinderbox) > 0) {
    $tbox = rune_tinderbox;
} else if (inv_total(inv, adamant_tinderbox) > 0) {
    $tbox = adamant_tinderbox;
} else if (inv_total(inv, mithril_tinderbox) > 0) {
    $tbox = mithril_tinderbox;
} else if (inv_total(inv, steel_tinderbox) > 0) {
    $tbox = steel_tinderbox;
} else if (inv_total(inv, iron_tinderbox) > 0) {
    $tbox = iron_tinderbox;
} else if (inv_total(inv, bronze_tinderbox) > 0) {
    $tbox = bronze_tinderbox;
} else if (inv_total(inv, founders_tinderbox) > 0) {
    $tbox = founders_tinderbox;
}
if ($tbox = tinderbox) {
    $xp_mul = 1;
} else if ($tbox = hc_tinderbox) {
    $xp_mul = 1;
} else if ($tbox = dragon_tinderbox) {
    $xp_mul = 4;
} else if ($tbox = rune_tinderbox) {
    $xp_mul = 3;
} else if ($tbox = adamant_tinderbox) {
    $xp_mul = 2;
} else if ($tbox = mithril_tinderbox) {
    $xp_mul = 2;
} else if ($tbox = steel_tinderbox) {
    $xp_mul = 1;
} else if ($tbox = iron_tinderbox) {
    $xp_mul = 1;
} else if ($tbox = bronze_tinderbox) {
    $xp_mul = 1;
} else if ($tbox = founders_tinderbox){
    $xp_mul = 1;
} else {
}
obj_del;
stat_advance(firemaking, multiply(oc_param($log, productexp), $xp_mul));
if (inv_total(worn, cavalier_brown) > 0) {
            stat_advance(firemaking, multiply(oc_param($log, productexp), $xp_mul));
            mes("Your firemaking skills are showing!");
}
if ($log = logs) {
    %logs_burned = calc(%logs_burned + 1);
} else if ($log = oak_logs){
    %oak_logs_burned = calc(%oak_logs_burned + 1);
} else if ($log = willow_logs){
    %willow_logs_burned = calc(%willow_logs_burned + 1);
} else if ($log = maple_logs){
    %maple_logs_burned = calc(%maple_logs_burned + 1);
} else if ($log = yew_logs){
    %yew_logs_burned = calc(%yew_logs_burned + 1);
} else if ($log = magic_logs){
    %magic_logs_burned = calc(%magic_logs_burned + 1);
}
sound_synth(fire_lit, 0, 0);
facesquare($fire_coord);
//mes("<tostring(map_clock)>, <tostring(%action_delay)>: The fire catches and the logs begin to burn.");
mes("The fire catches and the logs begin to burn.");
def_int $delay = calc(100 + random(100)); // firemaking length: https://archive.is/zF5hb
// Temp note: dur does not need updated
loc_add($fire_coord, loc_2732, 1, centrepiece_straight, $delay);

// -2 to match osrs behavior. Potentially this is an engine problem with world_delay being too slow though
world_delay(add($delay, -2));
obj_addall($fire_coord, ashes, 1, 100);

[proc,area_allow_loc_add](coord $coord)(boolean)
if (map_locaddunsafe($coord) = true) {
    return(false);
}
if (map_blocked($coord) = true) {
    return(false);
}
if (~inzone_coord_pair_table(bank_zones, coord) = true) { // zone based checks use coord instead of loc_coord
    return(false);
}
return(true);


[debugproc,pt]
if (p_finduid(uid) = true) {
    p_teleport(movecoord(coord, 1, 0, 0));
}

[proc,push_player](coord $origin_coord)
anim(null, 0);
if (~in_duel_arena($origin_coord) = true) {
    // https://youtu.be/L3OwjH-iXQU
    //  - could still fm in the duel arena. 
    //  - It just didnt move the player at all
    // https://oldschool.runescape.wiki/w/Update:RS2_-_more_fixes/changes
    //  - "Fixed: You could select a duel with the no movement option and then plant flowers or light a fire so you weren't standing next to your opponent."
    p_delay(0);
    return;
}
if (coord ! $origin_coord) {
    return;
}
if (lineofwalk(coord, movecoord(coord, -1, 0, 0)) = true & coord = $origin_coord) { // check west
    p_teleport(movecoord(coord, -1, 0, 0));
    p_delay(0);
}
if (lineofwalk(coord, movecoord(coord, 1, 0, 0)) = true & coord = $origin_coord) { // check east
    p_teleport(movecoord(coord, 1, 0, 0));
    p_delay(0);
}
if (lineofwalk(coord, movecoord(coord, 0, 0, -1)) = true & coord = $origin_coord) { // check south
    p_teleport(movecoord(coord, 0, 0, -1));
    p_delay(0);
}
if (lineofwalk(coord, movecoord(coord, 0, 0, 1)) = true & coord = $origin_coord) { // check north
    p_teleport(movecoord(coord, 0, 0, 1));
    p_delay(0);
}
