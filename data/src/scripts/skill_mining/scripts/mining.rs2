// normal rocks
[oploc1,_mining_rock_normal] @mining_firstswing(get_ore_normal);
[oploc3,_mining_rock_normal] @mining_continue(get_ore_normal);

// fast rocks. iron, granite
[oploc1,_mining_rock_fast] @mining_firstswing(get_ore_fast);
[oploc3,_mining_rock_fast] @mining_continue(get_ore_fast);

// Essence mine
[oploc1,loc_2491] @mining_firstswing(get_ore_essence);
[oploc3,loc_2491] @mining_continue(get_ore_essence);
[oploc1,essence_pillar] @mining_firstswing(get_ore_essencefrag);
[oploc3,essence_pillar] @mining_continue(get_ore_essencefrag);

// gem rocks
[oploc1,gemrock] @mining_firstswing(get_ore_gem_rock);
[oploc3,gemrock] @mining_continue(get_ore_gem_rock);

[label,mining_firstswing](label $get_ore)
def_int $is_empty = loc_param(mining_rock_empty);
if ($is_empty = ^true) {
    anim(null, 0);
    mes("There is no ore currently available in this rock.");
    sound_synth(prospect, 0, 0);
    return;
}
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
if (inv_freespace(inv) < 1) {
    anim(null, 0);
    ~mesbox("Your inventory is too full to hold any more <db_getfield($data, mining_table:ore_name, 0)>.");
    return;
}
def_int $levelreq = db_getfield($data, mining_table:rock_level, 0);
if (stat(mining) < $levelreq) {
    anim(null, 0);
    ~mesbox("You need a mining level of <tostring($levelreq)> to mine this rock.");
    return;
}

def_obj $pickaxe = ~pickaxe_checker;
if ($pickaxe = null) {
    anim(null, 0);
    ~mesbox("You need a pickaxe to mine this rock. You do not have a pickaxe which you have the Mining level to use.");
    return;
}
def_int $mining_rate = oc_param($pickaxe, mining_rate);
if (%action_delay < map_clock) {
    %action_delay = calc(map_clock + $mining_rate);
    p_oploc(1);
    return;
}
if (%founders_transmog = ^transmog_on) {
    anim(human_mining_founders_pickaxe, 0);
} else {
    anim(oc_param($pickaxe, mining_animation), 0);
}
mes("You swing your pick at the rock.");
if (%action_delay = map_clock) {
    jump($get_ore);
}
p_oploc(3);

[label,mining_continue](label $get_ore)
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
if (inv_freespace(inv) < 1) {
    anim(null, 0);
    ~mesbox("Your inventory is too full to hold any more <db_getfield($data, mining_table:ore_name, 0)>.");
    return;
}
def_int $levelreq = db_getfield($data, mining_table:rock_level, 0);
if (stat(mining) < $levelreq) {
    anim(null, 0);
    ~mesbox("You need a mining level of <tostring($levelreq)> to mine this rock.");
    return;
}
def_obj $pickaxe = ~pickaxe_checker;
if ($pickaxe = null) {
    anim(null, 0);
    ~mesbox("You need a pickaxe to mine this rock. You do not have a pickaxe which you have the Mining level to use.");
    return;
}
def_int $mining_rate = oc_param($pickaxe, mining_rate);

// sounds and skill anim is based off https://youtu.be/ix4_VVi9Xm4
sound_synth(mine_quick, 0, 0);

// if roll is due
if (%action_delay < map_clock) {
    %action_delay = calc(map_clock + $mining_rate);
} else if (%action_delay = map_clock) {
    if (%founders_transmog = ^transmog_on) {
        anim(human_mining_founders_pickaxe, 0);
    } else {
        anim(oc_param($pickaxe, mining_animation), 0);
    }
    jump($get_ore);
}
p_oploc(3);

[label,get_ore_normal]
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
// roll for gem
def_int $chance = 256;
def_obj $neck = inv_getobj(worn, ^wearpos_front);
if ($neck ! null & oc_category($neck) = category_557) {
    $chance = 86;
}
if (random($chance) = ^true) {
    def_namedobj $gem = ~mining_gem_table;
    def_int $count = 0;
    ~fortitude_check;
    if ($gem ! null) {
        inv_add(inv, $gem, 1);
        $count = 1;
        db_find(gem_cutting_table:uncut_gem, $gem);
        $data = db_findnext;
        mes("You just found <~add_article(oc_name(db_getfield($data, gem_cutting_table:cut_gem, 0)))>!");
        if (%fortitude > 224) {
            mes("You feel that last hit really popped gems loose");
            inv_add(inv, $gem, 1);
            $count = calc($count + 1);
        }
    }
   

    %gems_mined = calc(%gems_mined + $count);
} else if (stat_random(stat(mining), db_getfield($data, mining_table:rock_successchance, 0)) = true) {
    // They added a 1t p_delay in this update: https://oldschool.runescape.wiki/w/Update:Special_Attacks
    // p_delay(0);
    // deplete
    def_int $respawn = ~scale_by_playercount(db_getfield($data, mining_table:rock_respawnrate, 0));
    // Temp note: dur does not need updated
    loc_change(loc_param(next_loc_stage_mining), $respawn);
    sound_synth(sound_230, 0, 0); // Sudden says its sound_230
    anim(null, 0);
    // The 'perfect' gold rocks in Family Crest are the same ID as regular gold rocks, so check to 
    // give out the right ore if we're in that location. Only gold rocks are in this room.
    def_namedobj $output = db_getfield($data, mining_table:rock_output, 0);
    if(inzone(^crest_perfect_mine_lower_bound, ^crest_perfect_mine_upper_bound, coord) = true) {
        $output = perfect_gold_ore;
    }
    def_int $xp_mul = 1;
    def_int $product_amount = 1;
    def_obj $pickaxe = ~pickaxe_checker;
    switch_obj($pickaxe){
        case iron_pickaxe : {
            $xp_mul = 1;
            $product_amount = 1;
        }
        case steel_pickaxe : {
            $xp_mul = 1;
            $product_amount = 1;
        }
        case mithril_pickaxe : {
            $xp_mul = 2;
            $product_amount = 2;

        }
        case adamant_pickaxe : {
            $xp_mul = 2;
            $product_amount = 2;
        }
        case rune_pickaxe : {
            $xp_mul = 3;
            $product_amount = 3;
        }
        case dragon_pickaxe : {
            $xp_mul = 4;
            $product_amount = 4;
        }
        case founders_pickaxe : {
            $xp_mul = 1;
            $product_amount = 1;
        }

    }
    if (inv_freespace(inv) = 1) {
        $product_amount = 1;
    }
    inv_add(inv, $output, $product_amount);
    if ($output = copper_ore){
        %copper_ore_mined = calc(%copper_ore_mined + $product_amount);
    } else if ($output = tin_ore){
        %tin_ore_mined = calc(%tin_ore_mined + $product_amount);
    } else if ($output = iron_ore){
        %iron_ore_mined = calc(%iron_ore_mined + $product_amount);
    } else if ($output = coal){
        %coal_mined = calc(%coal_mined + $product_amount);
    } else if ($output = gold_ore){
        %gold_ore_mined = calc(%gold_ore_mined + $product_amount);
    } else if ($output = silver_ore){
        %silver_ore_mined = calc(%silver_ore_mined + $product_amount);
    } else if ($output = mithril_ore){
        %mithril_ore_mined = calc(%mithril_ore_mined + $product_amount);
    } else if ($output = adamantite_ore){
        %adamant_ore_mined = calc(%adamant_ore_mined + $product_amount);
    } else if ($output = runite_ore){
        %rune_ore_mined = calc(%rune_ore_mined + $product_amount);
    } else if ($output = dragon_ore){
        %dragon_ore_mined = calc(%dragon_ore_mined + $product_amount);
    }
    stat_advance(mining, multiply($xp_mul, db_getfield($data, mining_table:rock_exp, 0)));
    mes("You manage to mine some <db_getfield($data, mining_table:ore_name, 0)>.");
    return;
}
p_oploc(3);


// used for iron, granite, sandstone
[label,get_ore_fast]
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
// roll for gem
def_int $chance = 256;
def_obj $neck = inv_getobj(worn, ^wearpos_front);
if ($neck ! null & oc_category($neck) = category_557) {
    $chance = 64;
}
if (random($chance) = ^true) {
    def_namedobj $gem = ~mining_gem_table;
    def_int $count = 0;
    ~fortitude_check;
    if ($gem ! null) {
        inv_add(inv, $gem, 1);
        db_find(gem_cutting_table:uncut_gem, $gem);
        $data = db_findnext;
        mes("You just found <~add_article(oc_name(db_getfield($data, gem_cutting_table:cut_gem, 0)))>!");
        if (%fortitude > 224) {
            mes("You feel that last hit really popped gems loose");
            inv_add(inv, $gem, 1);
            $count = calc($count + 1);
        }        
    }
} else if (stat_random(stat(mining), db_getfield($data, mining_table:rock_successchance, 0)) = true) {
    // deplete
    def_int $respawn = ~scale_by_playercount(db_getfield($data, mining_table:rock_respawnrate, 0));
    // Temp note: dur does not need updated
    loc_change(loc_param(next_loc_stage_mining), $respawn);
    sound_synth(sound_230, 0, 0); // Sudden says its sound_230
    anim(null, 0);
    def_int $xp_mul = 1;
    def_int $product_amount = 1;
    def_obj $pickaxe = ~pickaxe_checker;
    switch_obj($pickaxe){
        case iron_pickaxe : {
            $xp_mul = 1;
            $product_amount = 1;
        }
        case steel_pickaxe : {
            $xp_mul = 1;
            $product_amount = 1;
        }
        case mithril_pickaxe : {
            $xp_mul = 2;
            $product_amount = 2;
        }
        case adamant_pickaxe : {
            $xp_mul = 2;
            $product_amount = 2;
        }
        case rune_pickaxe : {
            $xp_mul = 3;
            $product_amount = 3;
        }
        case dragon_pickaxe : {
            $xp_mul = 4;
            $product_amount = 4;
        }
        case founders_pickaxe : {
            $xp_mul = 1;
            $product_amount = 1;
        }

    }
    if (inv_freespace(inv) = 1) {
        $product_amount = 1;
    }
    def_namedobj $output = db_getfield($data, mining_table:rock_output, 0);
    inv_add(inv, $output, $product_amount);
    if ($output = copper_ore){
        %copper_ore_mined = calc(%copper_ore_mined + $product_amount);
    } else if ($output = tin_ore){
        %tin_ore_mined = calc(%tin_ore_mined + $product_amount);
    } else if ($output = iron_ore){
        %iron_ore_mined = calc(%iron_ore_mined + $product_amount);
    } else if ($output = coal){
        %coal_mined = calc(%coal_mined + $product_amount);
    } else if ($output = gold_ore){
        %gold_ore_mined = calc(%gold_ore_mined + $product_amount);
    } else if ($output = silver_ore){
        %silver_ore_mined = calc(%silver_ore_mined + $product_amount);
    } else if ($output = mithril_ore){
        %mithril_ore_mined = calc(%mithril_ore_mined + $product_amount);
    } else if ($output = adamantite_ore){
        %adamant_ore_mined = calc(%adamant_ore_mined + $product_amount);
    } else if ($output = runite_ore){
        %rune_ore_mined = calc(%rune_ore_mined + $product_amount);
    } else if ($output = dragon_ore){
        %dragon_ore_mined = calc(%dragon_ore_mined + $product_amount);
    }
    stat_advance(mining, multiply($xp_mul, db_getfield($data, mining_table:rock_exp, 0)));
    mes("You manage to mine some <db_getfield($data, mining_table:ore_name, 0)>.");
    return;
}
p_oploc(3);


[label,get_ore_essence]
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
def_int $random = random(100);
def_int $fragments = random(7);
def_int $product_amount1 = calc($fragments + 1);
if ($random > 49) {
    if ($fragments = 0){
        inv_add(inv, db_getfield($data, mining_table:rock_output, 0), 1);
        stat_advance(mining, db_getfield($data, mining_table:rock_exp, 0));
        mes("You manage to mine an unbound rune stone.");
        p_oploc(3);
        return;
    }
    inv_add(inv, rune_fragment, $product_amount1);
    mes("Some fragments are knocked loose.");
    %essencefrags_mined = calc(%essencefrags_mined + $product_amount1);
}
def_int $xp_mul = 1;
def_int $product_amount = 1;
def_obj $pickaxe = ~pickaxe_checker;
switch_obj($pickaxe){
    case iron_pickaxe : {
        $xp_mul = 1;
        $product_amount = 1;
    }
    case steel_pickaxe : {
        $xp_mul = 1;
        $product_amount = 1;
    }
    case mithril_pickaxe : {
        $xp_mul = 2;
        $product_amount = 2;
    }
    case adamant_pickaxe : {
        $xp_mul = 2;
        $product_amount = 2;
    }
    case rune_pickaxe : {
        $xp_mul = 3;
        $product_amount = 3;
    }
    case dragon_pickaxe : {
        $xp_mul = 4;
        $product_amount = 4;
    }
    case founders_pickaxe : {
        $xp_mul = 1;
        $product_amount = 1;
    }
}
if (inv_freespace(inv) = 1) {
    $product_amount = 1;
}
inv_add(inv, db_getfield($data, mining_table:rock_output, 0), $product_amount);
stat_advance(mining, multiply($xp_mul, db_getfield($data, mining_table:rock_exp, 0)));
mes("You manage to mine an unbound rune stone.");
p_oploc(3);
%essence_mined = calc(%essence_mined + $product_amount);
[label,get_ore_essencefrag]
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
def_int $random = random(100);
def_int $fragments = random(1);
def_namedobj $output = db_getfield($data, mining_table:rock_output, 0);
def_int $product_amount = calc($random + $fragments);
if ($random > 0) {
    if ($fragments = 0){
        inv_add(inv, $output, $random);
        stat_advance(mining, db_getfield($data, mining_table:rock_exp, 0));
        mes("You manage to mine a rune fragment.");
        p_oploc(3);
        return;
    }
    inv_add(inv, rune_fragment, $fragments);
    mes("Some more fragments are knocked loose.");
    %essencefrags_mined = calc(%essencefrags_mined + $product_amount);
}
stat_advance(mining, db_getfield($data, mining_table:rock_exp, 0));
p_oploc(3);

[label,get_ore_gem_rock]
db_find(mining_table:rock, loc_type);
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
def_int $low;
def_int $high;
$low, $high = db_getfield($data, mining_table:rock_successchance, 0);
def_obj $neck = inv_getobj(worn, ^wearpos_front);
if ($neck ! null & oc_category($neck) = category_557) {
    $low = multiply($low, 3);
    $high = multiply($high, 3);
}
if (stat_random(stat(mining), $low, $high) = true) {
    // They added a 1t p_delay in this update: https://oldschool.runescape.wiki/w/Update:Special_Attacks
    // p_delay(0);
    // deplete
    def_int $respawn = ~scale_by_playercount(db_getfield($data, mining_table:rock_respawnrate, 0));
    // Temp note: dur does not need updated
    loc_change(loc_param(next_loc_stage_mining), $respawn);
    // stop mining, give ore and xp.
    sound_synth(found_gem, 0, 0);
    anim(null, 0);
    def_namedobj $gem;
    def_int $count;
    $gem, $count = ~roll_on_drop_table(gem_rock_table);
    inv_add(inv, $gem, 1);
    stat_advance(mining, db_getfield($data, mining_table:rock_exp, 0));
    %gems_mined = calc(%gems_mined + 1);
    db_find(gem_cutting_table:uncut_gem, $gem);
    $data = db_findnext;
    mes("You just mined <~add_article(oc_name(db_getfield($data, gem_cutting_table:cut_gem, 0)))>!");
    return;
}
p_oploc(3);

[proc,mining_gem_table]()(namedobj)
def_int $rand = random(128);
if ($rand < 1) return (uncut_dragonstone);
if ($rand < 2) return (uncut_diamond);
if ($rand < 10) return (uncut_ruby);
if ($rand < 26) return (uncut_emerald);
if ($rand < 58) return (uncut_sapphire);
else return(null);